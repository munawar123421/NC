#include <iostream>
#include <vector>

using namespace std;

// Function to perform forward interpolation
double forwardInterpolation(const vector<double>& x, const vector<double>& y, double xValue) {
    int n = x.size();

    // Calculating divided differences
    vector<vector<double>> dividedDiff(n, vector<double>(n));
    for (int i = 0; i < n; ++i) {
        dividedDiff[i][0] = y[i];
    }
    for (int j = 1; j < n; ++j) {
        for (int i = 0; i < n - j; ++i) {
            dividedDiff[i][j] = (dividedDiff[i + 1][j - 1] - dividedDiff[i][j - 1]) / (x[i + j] - x[i]);
        }
    }

    // Calculating interpolation
    double result = 0;
    double term = 1;
    for (int i = 0; i < n; ++i) {
        result += dividedDiff[0][i] * term;
        term *= (xValue - x[i]);
    }

    return result;
}

int main() {
    // Input values
    vector<double> x;
    vector<double> y;

    cout << "Enter 5 values of X:" << endl;
    for (int i = 0; i < 5; ++i) {
        double value;
        cin >> value;
        x.push_back(value);
    }

    cout << "Enter 5 values of Y:" << endl;
    for (int i = 0; i < 5; ++i) {
        double value;
        cin >> value;
        y.push_back(value);
    }

    // Display input values in a table
    cout << "\nTable of values:" << endl;
    cout << "X\tY" << endl;
    for (int i = 0; i < 5; ++i) {
        cout << x[i] << "\t" << y[i] << endl;
    }

    // Performing interpolation
    cout << "\nEnter the value of x for interpolation: ";
    double xValue;
    cin >> xValue;
    double interpolatedValue = forwardInterpolation(x, y, xValue);

    // Output
    cout << "\nInterpolated value at x = " << xValue << " is: " << interpolatedValue << endl;

    return 0;
}